@page "/post/create"

@using Models.DTOs.Post
@using Platform.Web.Services.Interfaces
@using Platform.Web.Shared.Components

@inject IPostDataService PostService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@attribute [Authorize]

@if (_loading)
{   
    <LoadingIndicator/>
}


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">Create Post</h3>
    <div class="card-body">
        <EditForm Model="PostDto" OnValidSubmit="CreatePost">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Title</label>
                <InputText @bind-Value="PostDto.Name" class="form-control"></InputText>
                <ValidationMessage For="()=>PostDto.Name"></ValidationMessage>
            </div>
            <div class="form-group">
                <label>Description</label>
                <InputTextArea @bind-Value="PostDto.Description" class="form-control"></InputTextArea>
                <ValidationMessage For="()=>PostDto.Description"></ValidationMessage>
            </div>
            <div class="form-group">
                <NavLink href="posts" class="btn btn-secondary">Cancel</NavLink>
                <button type="submit" class="btn btn-primary">Create</button>
            </div>

             <InputImage Label="Upload Image" OnSelectedImage="OnSelectedImage"/>
        </EditForm>
    </div>
</div>

@code {
    private PostDto PostDto { get; set; } = new PostDto();
    private bool _loading = false;

    private async Task CreatePost()
    {
        _loading = true;
        PostDto.AuthorId = await AuthService.GetUserId();
        await PostService.Create(PostDto);
        NavigationManager.NavigateTo("posts");
        _loading = false;
    }

     private void OnSelectedImage(string imageBase64)
    {
        PostDto.ImageContent = Convert.FromBase64String(imageBase64);
    }
}
