@page "/posts"

@using Models.DTOs.Post
@using Platform.Web.Services.Interfaces
@using Platform.Web.Shared.Components;

@inject IPostDataService PostService
@inject IPostLikeService PostLikeService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@attribute [Authorize]

@foreach (var Post in Posts)
{
    <div class="card m-4" style="width: 18rem;" @onclick="() => ViewPost(Post.Id)">
        <img class="card-img-top"
         src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAeh-_7gr6Cghd_D4YtbNZhEuP67fGjOYk5xIKpHrncu7KwJyOea0aM_XfMmG_mKPekPw&usqp=CAU"
         alt="Card image cap">
        <div class="card-body">
            <p class="card-text">@Post.Name</p>
            <p class="card-text">@Post.Description</p>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <p>comments: @Post.CommentsCount</p>
            </div>
            <div class="col-sm-6">
                <p>likes: @Post.Likes</p>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" @onclick="() => LikePost(Post.Id)">Like</button>
}

<button class="btn btn-primary" @onclick="CreatePost">Create</button>

@code {
    private IEnumerable<PostDto> Posts { get; set; } = new List<PostDto>();

    protected override async Task OnInitializedAsync()
    {
        Posts = await PostService.List();
    }

    private void CreatePost()
    {
        NavigationManager.NavigateTo("/post/create");
    }

    private void ViewPost(int id)
    {
        NavigationManager.NavigateTo($"/posts/{id}");
    }

    private async Task LikePost(int PostId)
    {
        var userId = await AuthService.GetUserId();
        await PostLikeService.LikeUnlike(PostId, userId);
    }
}
