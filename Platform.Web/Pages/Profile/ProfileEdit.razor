@page "/profiles/{UserId}"

@using Business.Interfaces
@using Models.DTOs.UserProfile
@using Platform.Web.Shared.Components

@inject IUserProfileService ProfileService
@inject NavigationManager NavManager

@attribute [Authorize]

@if (UserProfile != null)
{
    
    <EditForm Model="UserProfile" OnSubmit="UpdateProfile">
        <div class="form-group">
            <label>First Name</label>
            <InputText @bind-Value="UserProfile.FirstName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText @bind-Value="UserProfile.LastName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label>Bio</label>
            <InputTextArea @bind-Value="UserProfile.Bio" class="form-control"></InputTextArea>
        </div>
        <div class="form-group">
            <NavLink href="profile" class="btn btn-secondary">Cancel</NavLink>
            <button type="submit" class="btn btn-primary">Update</button>
        </div>

        <InputImage Label="Upload Image" OnSelectedImage="OnSelectedImage"/>
      
    </EditForm>
}

@code {
    [Parameter]
    public string UserId { get; set; }

    private UserProfileDto UserProfile { get; set; }


    protected override async Task OnInitializedAsync()
    {
        UserProfile = await ProfileService.Get(new Guid(UserId));
    }

    private async Task UpdateProfile()
    {
        await ProfileService.Update(new Guid(UserId), UserProfile);
    }

    private void OnSelectedImage(string imageBase64)
    {
        UserProfile.ImageContent = Convert.FromBase64String(imageBase64);
    }
}
