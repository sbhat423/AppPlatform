@using Models.DTOs.SubComment
@using Platform.Web.Services.Interfaces
@using Platform.Web.Shared.Components;

@inject ISubCommentService SubCommentService
@inject ICommentLikeService CommentLikeService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@foreach (var subComment in SubComments)
{
    <div class="row">
        <div class="col-sm-6 m-2" style="background-color: lightgray">
            <p>@subComment.Content</p>

            <div>
                @if (subComment.CreatedBy == UserId)
                {
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteComment(subComment)">
                        <i class="fa fa-trash"></i>
                    </button>
                }
                <button class="btn btn-sm btn-primary m-2" @onclick="() => LikeUnlike(subComment)">
                    <i class="fa fa-thumbs-up"></i>
                </button>
            </div>
        </div> 
    </div>
}

@code {
    [Parameter]
    public int CommentId { get; set; }
    private IEnumerable<SubCommentDto> SubComments { get; set; } = new List<SubCommentDto>();
    private Guid UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SubComments = await SubCommentService.List(CommentId);
        UserId = await AuthService.GetUserId();
    }

    private async Task DeleteComment(SubCommentDto subComment)
    {
        await SubCommentService.Delete(subComment.Id);
        SubComments = SubComments.Where(x => x.Id != subComment.Id);
    }

    private async Task LikeUnlike(SubCommentDto comment)
    {
        await CommentLikeService.LikeUnlike(comment.Id, UserId);
    }
}
