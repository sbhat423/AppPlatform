@using Models.DTOs.Comment
@using Platform.Web.Services.Interfaces
@using Platform.Web.Shared.Components;

@inject ICommentDataService CommentService
@inject ICommentLikeService CommentLikeService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@foreach (var comment in Comments)
{
    <Avatar UserProfile="comment.UserProfile"/>
    <p>@comment.Content</p>
    <p>likes: @comment.Likes</p>

    @if (comment.CreatedBy == CurrentUserId)
    {
        <button class="btn btn-sm btn-danger" @onclick="() => DeleteComment(comment)">
            <i class="fa fa-trash"></i>
        </button>
    }

    <button class="btn btn-sm btn-primary m-2" @onclick="() => LikeUnlike(comment)">
        <i class="fa fa-thumbs-up"></i>
    </button>

    <div class="row">
        <div class="offset-sm-1">
            <SubCommentList CommentId="comment.Id" />
            <SubCommentCreate CommentId="comment.Id" />
        </div>
    </div>
}

@code {
    [Parameter]
    public int PostId { get; set; }
    private IEnumerable<CommentDto> Comments { get; set; } = new List<CommentDto>();
    private bool canDelete { get; set; } = false;

    private Guid CurrentUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await AuthService.GetUserId();
        Comments = await CommentService.ListByPostId(PostId);
    }

    private async Task DeleteComment(CommentDto comment)
    {
        await CommentService.Delete(comment.Id);
        Comments = Comments.Where(x => x.Id != comment.Id);
    }

    private async Task LikeUnlike(CommentDto comment)
    {
        await CommentLikeService.LikeUnlike(comment.Id, CurrentUserId);
    }
}
