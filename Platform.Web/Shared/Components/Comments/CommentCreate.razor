@using Models.DTOs.Comment
@using Platform.Web.Services.Interfaces

@inject ICommentDataService CommentService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@if (!_displayEditor)
{
    <div class="form-group">
        <button class="btn btn-primary" @onclick="DisplayEditor">Add Comment</button>
    </div>
}
else
{
    <EditForm Model="_comment" OnValidSubmit="CreateComment">
        <div class="form-group">
            <InputTextArea @bind-Value="_comment.Content" class="form-control"></InputTextArea>
            <div class="form-group">
                <button type="button" class="btn btn-secondary" @onclick="CloseEditor">Cancel</button>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int PostId { get; set; }
    private CommentDto _comment { get; set; } = new CommentDto();
    private bool _displayEditor { get; set; } = false;

    private async Task CreateComment()
    {
        _comment.CreatedBy = await AuthService.GetUserId();
        await CommentService.Create(PostId, _comment);
    }

    private void DisplayEditor()
    {
        _displayEditor = true;
    }

    private void CloseEditor()
    {
        _displayEditor = false;
    }
}
